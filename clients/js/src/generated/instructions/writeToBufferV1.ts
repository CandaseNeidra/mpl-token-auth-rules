/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type WriteToBufferV1InstructionAccounts = {
  /** Payer and creator of the RuleSet */
  payer?: Signer;
  /** The PDA account where the RuleSet buffer is stored */
  bufferPda: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type WriteToBufferV1InstructionData = {
  discriminator: number;
  writeToBufferV1Discriminator: number;
  data: Uint8Array;
  overwrite: boolean;
};

export type WriteToBufferV1InstructionDataArgs = {
  data: Uint8Array;
  overwrite: boolean;
};

export function getWriteToBufferV1InstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  WriteToBufferV1InstructionDataArgs,
  WriteToBufferV1InstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    WriteToBufferV1InstructionDataArgs,
    any,
    WriteToBufferV1InstructionData
  >(
    s.struct<WriteToBufferV1InstructionData>(
      [
        ['discriminator', s.u8()],
        ['writeToBufferV1Discriminator', s.u8()],
        ['data', s.bytes({ size: s.u32() })],
        ['overwrite', s.bool()],
      ],
      { description: 'WriteToBufferV1InstructionData' }
    ),
    (value) => ({ ...value, discriminator: 2, writeToBufferV1Discriminator: 0 })
  ) as Serializer<
    WriteToBufferV1InstructionDataArgs,
    WriteToBufferV1InstructionData
  >;
}

// Args.
export type WriteToBufferV1InstructionArgs = WriteToBufferV1InstructionDataArgs;

// Instruction.
export function writeToBufferV1(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: WriteToBufferV1InstructionAccounts & WriteToBufferV1InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenAuthRules',
    'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    bufferPda: [input.bufferPda, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.payer, false);
  addAccountMeta(keys, signers, resolvedAccounts.bufferPda, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);

  // Data.
  const data =
    getWriteToBufferV1InstructionDataSerializer(context).serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
